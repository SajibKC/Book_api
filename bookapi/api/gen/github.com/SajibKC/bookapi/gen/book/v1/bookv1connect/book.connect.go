// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: book.proto

package bookv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/SajibKC/bookapi/api/gen/github.com/SajibKC/bookapi/gen/book/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BookServiceName is the fully-qualified name of the BookService service.
	BookServiceName = "book.v1.BookService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BookServiceCreateBookProcedure is the fully-qualified name of the BookService's CreateBook RPC.
	BookServiceCreateBookProcedure = "/book.v1.BookService/CreateBook"
	// BookServiceListBooksProcedure is the fully-qualified name of the BookService's ListBooks RPC.
	BookServiceListBooksProcedure = "/book.v1.BookService/ListBooks"
	// BookServiceGetBookProcedure is the fully-qualified name of the BookService's GetBook RPC.
	BookServiceGetBookProcedure = "/book.v1.BookService/GetBook"
	// BookServiceUpdateBookProcedure is the fully-qualified name of the BookService's UpdateBook RPC.
	BookServiceUpdateBookProcedure = "/book.v1.BookService/UpdateBook"
	// BookServiceDeleteBookProcedure is the fully-qualified name of the BookService's DeleteBook RPC.
	BookServiceDeleteBookProcedure = "/book.v1.BookService/DeleteBook"
)

// BookServiceClient is a client for the book.v1.BookService service.
type BookServiceClient interface {
	CreateBook(context.Context, *connect.Request[v1.CreateBookRequest]) (*connect.Response[v1.CreateBookResponse], error)
	ListBooks(context.Context, *connect.Request[v1.ListBooksRequest]) (*connect.Response[v1.ListBooksResponse], error)
	GetBook(context.Context, *connect.Request[v1.GetBookRequest]) (*connect.Response[v1.GetBookResponse], error)
	UpdateBook(context.Context, *connect.Request[v1.UpdateBookRequest]) (*connect.Response[v1.UpdateBookResponse], error)
	DeleteBook(context.Context, *connect.Request[v1.DeleteBookRequest]) (*connect.Response[v1.DeleteBookResponse], error)
}

// NewBookServiceClient constructs a client for the book.v1.BookService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBookServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BookServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	bookServiceMethods := v1.File_book_proto.Services().ByName("BookService").Methods()
	return &bookServiceClient{
		createBook: connect.NewClient[v1.CreateBookRequest, v1.CreateBookResponse](
			httpClient,
			baseURL+BookServiceCreateBookProcedure,
			connect.WithSchema(bookServiceMethods.ByName("CreateBook")),
			connect.WithClientOptions(opts...),
		),
		listBooks: connect.NewClient[v1.ListBooksRequest, v1.ListBooksResponse](
			httpClient,
			baseURL+BookServiceListBooksProcedure,
			connect.WithSchema(bookServiceMethods.ByName("ListBooks")),
			connect.WithClientOptions(opts...),
		),
		getBook: connect.NewClient[v1.GetBookRequest, v1.GetBookResponse](
			httpClient,
			baseURL+BookServiceGetBookProcedure,
			connect.WithSchema(bookServiceMethods.ByName("GetBook")),
			connect.WithClientOptions(opts...),
		),
		updateBook: connect.NewClient[v1.UpdateBookRequest, v1.UpdateBookResponse](
			httpClient,
			baseURL+BookServiceUpdateBookProcedure,
			connect.WithSchema(bookServiceMethods.ByName("UpdateBook")),
			connect.WithClientOptions(opts...),
		),
		deleteBook: connect.NewClient[v1.DeleteBookRequest, v1.DeleteBookResponse](
			httpClient,
			baseURL+BookServiceDeleteBookProcedure,
			connect.WithSchema(bookServiceMethods.ByName("DeleteBook")),
			connect.WithClientOptions(opts...),
		),
	}
}

// bookServiceClient implements BookServiceClient.
type bookServiceClient struct {
	createBook *connect.Client[v1.CreateBookRequest, v1.CreateBookResponse]
	listBooks  *connect.Client[v1.ListBooksRequest, v1.ListBooksResponse]
	getBook    *connect.Client[v1.GetBookRequest, v1.GetBookResponse]
	updateBook *connect.Client[v1.UpdateBookRequest, v1.UpdateBookResponse]
	deleteBook *connect.Client[v1.DeleteBookRequest, v1.DeleteBookResponse]
}

// CreateBook calls book.v1.BookService.CreateBook.
func (c *bookServiceClient) CreateBook(ctx context.Context, req *connect.Request[v1.CreateBookRequest]) (*connect.Response[v1.CreateBookResponse], error) {
	return c.createBook.CallUnary(ctx, req)
}

// ListBooks calls book.v1.BookService.ListBooks.
func (c *bookServiceClient) ListBooks(ctx context.Context, req *connect.Request[v1.ListBooksRequest]) (*connect.Response[v1.ListBooksResponse], error) {
	return c.listBooks.CallUnary(ctx, req)
}

// GetBook calls book.v1.BookService.GetBook.
func (c *bookServiceClient) GetBook(ctx context.Context, req *connect.Request[v1.GetBookRequest]) (*connect.Response[v1.GetBookResponse], error) {
	return c.getBook.CallUnary(ctx, req)
}

// UpdateBook calls book.v1.BookService.UpdateBook.
func (c *bookServiceClient) UpdateBook(ctx context.Context, req *connect.Request[v1.UpdateBookRequest]) (*connect.Response[v1.UpdateBookResponse], error) {
	return c.updateBook.CallUnary(ctx, req)
}

// DeleteBook calls book.v1.BookService.DeleteBook.
func (c *bookServiceClient) DeleteBook(ctx context.Context, req *connect.Request[v1.DeleteBookRequest]) (*connect.Response[v1.DeleteBookResponse], error) {
	return c.deleteBook.CallUnary(ctx, req)
}

// BookServiceHandler is an implementation of the book.v1.BookService service.
type BookServiceHandler interface {
	CreateBook(context.Context, *connect.Request[v1.CreateBookRequest]) (*connect.Response[v1.CreateBookResponse], error)
	ListBooks(context.Context, *connect.Request[v1.ListBooksRequest]) (*connect.Response[v1.ListBooksResponse], error)
	GetBook(context.Context, *connect.Request[v1.GetBookRequest]) (*connect.Response[v1.GetBookResponse], error)
	UpdateBook(context.Context, *connect.Request[v1.UpdateBookRequest]) (*connect.Response[v1.UpdateBookResponse], error)
	DeleteBook(context.Context, *connect.Request[v1.DeleteBookRequest]) (*connect.Response[v1.DeleteBookResponse], error)
}

// NewBookServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBookServiceHandler(svc BookServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bookServiceMethods := v1.File_book_proto.Services().ByName("BookService").Methods()
	bookServiceCreateBookHandler := connect.NewUnaryHandler(
		BookServiceCreateBookProcedure,
		svc.CreateBook,
		connect.WithSchema(bookServiceMethods.ByName("CreateBook")),
		connect.WithHandlerOptions(opts...),
	)
	bookServiceListBooksHandler := connect.NewUnaryHandler(
		BookServiceListBooksProcedure,
		svc.ListBooks,
		connect.WithSchema(bookServiceMethods.ByName("ListBooks")),
		connect.WithHandlerOptions(opts...),
	)
	bookServiceGetBookHandler := connect.NewUnaryHandler(
		BookServiceGetBookProcedure,
		svc.GetBook,
		connect.WithSchema(bookServiceMethods.ByName("GetBook")),
		connect.WithHandlerOptions(opts...),
	)
	bookServiceUpdateBookHandler := connect.NewUnaryHandler(
		BookServiceUpdateBookProcedure,
		svc.UpdateBook,
		connect.WithSchema(bookServiceMethods.ByName("UpdateBook")),
		connect.WithHandlerOptions(opts...),
	)
	bookServiceDeleteBookHandler := connect.NewUnaryHandler(
		BookServiceDeleteBookProcedure,
		svc.DeleteBook,
		connect.WithSchema(bookServiceMethods.ByName("DeleteBook")),
		connect.WithHandlerOptions(opts...),
	)
	return "/book.v1.BookService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BookServiceCreateBookProcedure:
			bookServiceCreateBookHandler.ServeHTTP(w, r)
		case BookServiceListBooksProcedure:
			bookServiceListBooksHandler.ServeHTTP(w, r)
		case BookServiceGetBookProcedure:
			bookServiceGetBookHandler.ServeHTTP(w, r)
		case BookServiceUpdateBookProcedure:
			bookServiceUpdateBookHandler.ServeHTTP(w, r)
		case BookServiceDeleteBookProcedure:
			bookServiceDeleteBookHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBookServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBookServiceHandler struct{}

func (UnimplementedBookServiceHandler) CreateBook(context.Context, *connect.Request[v1.CreateBookRequest]) (*connect.Response[v1.CreateBookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("book.v1.BookService.CreateBook is not implemented"))
}

func (UnimplementedBookServiceHandler) ListBooks(context.Context, *connect.Request[v1.ListBooksRequest]) (*connect.Response[v1.ListBooksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("book.v1.BookService.ListBooks is not implemented"))
}

func (UnimplementedBookServiceHandler) GetBook(context.Context, *connect.Request[v1.GetBookRequest]) (*connect.Response[v1.GetBookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("book.v1.BookService.GetBook is not implemented"))
}

func (UnimplementedBookServiceHandler) UpdateBook(context.Context, *connect.Request[v1.UpdateBookRequest]) (*connect.Response[v1.UpdateBookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("book.v1.BookService.UpdateBook is not implemented"))
}

func (UnimplementedBookServiceHandler) DeleteBook(context.Context, *connect.Request[v1.DeleteBookRequest]) (*connect.Response[v1.DeleteBookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("book.v1.BookService.DeleteBook is not implemented"))
}
